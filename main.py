# /telegram_bot/main.py (–í–ï–†–°–ò–Ø –î–õ–Ø AIOGRAM 3.x)

import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandObject
from aiogram.fsm.storage.memory import MemoryStorage
import cfg
import db
import handlerkeyboard as kb


logging.basicConfig(level=logging.INFO)
dp = Dispatcher(storage=MemoryStorage())

PRIZES = ["üçè", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "üçí", "üçë", "üçç"]

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    db.add_user_if_not_exists(user_id)
    
    attempts = db.get_attempts(user_id)
    text = (f"üéâ –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç-—Ä—É–ª–µ—Ç–∫–∞!\n\n"
            f"–ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é —É–¥–∞—á—É. –£ —Ç–µ–±—è –µ—Å—Ç—å *{attempts}* –ø–æ–ø—ã—Ç–æ–∫.\n\n"
            f"–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")

    await message.answer(text, reply_markup=kb.get_roulette_keyboard(), parse_mode="Markdown")

@dp.message(Command("add_attempts"))
async def cmd_add_attempts(message: types.Message, command: CommandObject, bot: Bot):
    if message.from_user.id != cfg.ADMIN_ID:
        return

    try:
        args = command.args.split()
        if len(args) != 2:
            await message.reply("–û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: /add_attempts [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—á–∏—Å–ª–æ]")
            return

        user_id_to_add, amount = map(int, args)
        
        current_attempts = db.get_attempts(user_id_to_add)
        new_attempts = current_attempts + amount
        db.update_attempts(user_id_to_add, new_attempts)

        await message.reply(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–∏–ª {amount} –ø–æ–ø—ã—Ç–æ–∫ —é–∑–µ—Ä—É {user_id_to_add}. "
                            f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {new_attempts}.")
        
        try:
            await bot.send_message(user_id_to_add, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º *{amount}* –ø–æ–ø—ã—Ç–æ–∫!", parse_mode="Markdown")
        except Exception:
            await message.reply("(–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")

    except (ValueError, IndexError, TypeError):
        await message.reply("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")

@dp.callback_query(F.data == "spin_roulette")
async def cb_spin_roulette(call: types.CallbackQuery):
    user_id = call.from_user.id
    attempts_left = db.get_attempts(user_id)

    if attempts_left <= 0:
        await call.answer("–£–ø—Å, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!", show_alert=True)
        return

    attempts_left -= 1
    db.update_attempts(user_id, attempts_left)

    prize = random.choice(PRIZES)
    text = (f"–ö—Ä—É—Ç–∏–º... –í—ã–ø–∞–ª –ø—Ä–∏–∑: *{prize}*!\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: *{attempts_left}*.")

    await call.message.edit_text(text, reply_markup=kb.get_roulette_keyboard(), parse_mode="Markdown")
    await call.answer()

async def main():
    bot = Bot(token=cfg.BOT_TOKEN)
    
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    db.init_db()
    print("–ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞.")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())